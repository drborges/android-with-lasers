// Code generated by dagger-compiler.  Do not edit.
package com.thoughtworks.android.activities;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<HomeActivityTest>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code HomeActivityTest} and its
 * dependencies.
 * 
 * Being a {@code Provider<HomeActivityTest>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<HomeActivityTest>} and handling injection
 * of annotated fields.
 */
public final class HomeActivityTest$$InjectAdapter extends Binding<HomeActivityTest>
    implements Provider<HomeActivityTest>, MembersInjector<HomeActivityTest> {
  private Binding<HomeActivity> activity;

  public HomeActivityTest$$InjectAdapter() {
    super("com.thoughtworks.android.activities.HomeActivityTest", "members/com.thoughtworks.android.activities.HomeActivityTest", NOT_SINGLETON, HomeActivityTest.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    activity = (Binding<HomeActivity>) linker.requestBinding("com.thoughtworks.android.activities.HomeActivity", HomeActivityTest.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(activity);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<HomeActivityTest>}.
   */
  @Override
  public HomeActivityTest get() {
    HomeActivityTest result = new HomeActivityTest();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<HomeActivityTest>}.
   */
  @Override
  public void injectMembers(HomeActivityTest object) {
    object.activity = activity.get();
  }
}
